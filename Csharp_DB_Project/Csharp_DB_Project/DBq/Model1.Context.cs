//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Csharp_DB_Project.DBq
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ProjectEntities : DbContext
    {
        public ProjectEntities()
            : base("name=ProjectEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<admin> admins { get; set; }
        public virtual DbSet<company> companies { get; set; }
        public virtual DbSet<offer> offers { get; set; }
        public virtual DbSet<order> orders { get; set; }
        public virtual DbSet<stockListing> stockListings { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<user> users { get; set; }
        public virtual DbSet<offerData> offerDatas { get; set; }
        public virtual DbSet<offerList> offerLists { get; set; }
        public virtual DbSet<orderData> orderDatas { get; set; }
        public virtual DbSet<orderList> orderLists { get; set; }
        public virtual DbSet<viewAllListing> viewAllListings { get; set; }
        public virtual DbSet<viewListing> viewListings { get; set; }
        public virtual DbSet<viewListing1> viewListings1 { get; set; }
        public virtual DbSet<viewOffer> viewOffers { get; set; }
    
        [DbFunction("ProjectEntities", "searchListing")]
        public virtual IQueryable<searchListing_Result> searchListing(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<searchListing_Result>("[ProjectEntities].[searchListing](@search)", searchParameter);
        }
    
        [DbFunction("ProjectEntities", "searchOffersForAdmin")]
        public virtual IQueryable<searchOffersForAdmin_Result> searchOffersForAdmin(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<searchOffersForAdmin_Result>("[ProjectEntities].[searchOffersForAdmin](@search)", searchParameter);
        }
    
        [DbFunction("ProjectEntities", "searchOrdersForAdmin")]
        public virtual IQueryable<searchOrdersForAdmin_Result> searchOrdersForAdmin(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<searchOrdersForAdmin_Result>("[ProjectEntities].[searchOrdersForAdmin](@search)", searchParameter);
        }
    
        [DbFunction("ProjectEntities", "searchUser")]
        public virtual IQueryable<searchUser_Result> searchUser(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<searchUser_Result>("[ProjectEntities].[searchUser](@search)", searchParameter);
        }
    
        public virtual int addCompany(string name, string type, ObjectParameter companyID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addCompany", nameParameter, typeParameter, companyID);
        }
    
        public virtual int addListing(Nullable<int> compID, Nullable<int> userID, Nullable<decimal> amount, Nullable<decimal> price)
        {
            var compIDParameter = compID.HasValue ?
                new ObjectParameter("compID", compID) :
                new ObjectParameter("compID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addListing", compIDParameter, userIDParameter, amountParameter, priceParameter);
        }
    
        public virtual int addOffer(Nullable<int> offeringID, Nullable<int> sellerID, Nullable<int> stockID, Nullable<decimal> offerAmount)
        {
            var offeringIDParameter = offeringID.HasValue ?
                new ObjectParameter("offeringID", offeringID) :
                new ObjectParameter("offeringID", typeof(int));
    
            var sellerIDParameter = sellerID.HasValue ?
                new ObjectParameter("sellerID", sellerID) :
                new ObjectParameter("sellerID", typeof(int));
    
            var stockIDParameter = stockID.HasValue ?
                new ObjectParameter("stockID", stockID) :
                new ObjectParameter("stockID", typeof(int));
    
            var offerAmountParameter = offerAmount.HasValue ?
                new ObjectParameter("offerAmount", offerAmount) :
                new ObjectParameter("offerAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addOffer", offeringIDParameter, sellerIDParameter, stockIDParameter, offerAmountParameter);
        }
    
        public virtual int addOrder(Nullable<int> orderingID, Nullable<int> sellerID, Nullable<int> stockID, Nullable<decimal> orderAmount, Nullable<int> offerID)
        {
            var orderingIDParameter = orderingID.HasValue ?
                new ObjectParameter("orderingID", orderingID) :
                new ObjectParameter("orderingID", typeof(int));
    
            var sellerIDParameter = sellerID.HasValue ?
                new ObjectParameter("sellerID", sellerID) :
                new ObjectParameter("sellerID", typeof(int));
    
            var stockIDParameter = stockID.HasValue ?
                new ObjectParameter("stockID", stockID) :
                new ObjectParameter("stockID", typeof(int));
    
            var orderAmountParameter = orderAmount.HasValue ?
                new ObjectParameter("orderAmount", orderAmount) :
                new ObjectParameter("orderAmount", typeof(decimal));
    
            var offerIDParameter = offerID.HasValue ?
                new ObjectParameter("offerID", offerID) :
                new ObjectParameter("offerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addOrder", orderingIDParameter, sellerIDParameter, stockIDParameter, orderAmountParameter, offerIDParameter);
        }
    
        public virtual int cancelOrder(Nullable<int> orderID, Nullable<int> sellerID, Nullable<int> buyerID)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("orderID", orderID) :
                new ObjectParameter("orderID", typeof(int));
    
            var sellerIDParameter = sellerID.HasValue ?
                new ObjectParameter("sellerID", sellerID) :
                new ObjectParameter("sellerID", typeof(int));
    
            var buyerIDParameter = buyerID.HasValue ?
                new ObjectParameter("buyerID", buyerID) :
                new ObjectParameter("buyerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cancelOrder", orderIDParameter, sellerIDParameter, buyerIDParameter);
        }
    
        public virtual int deleteCompany(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteCompany", companyIDParameter);
        }
    
        public virtual int deleteOffer(Nullable<int> offerID)
        {
            var offerIDParameter = offerID.HasValue ?
                new ObjectParameter("offerID", offerID) :
                new ObjectParameter("offerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteOffer", offerIDParameter);
        }
    
        public virtual int deleteStock(Nullable<int> stockID)
        {
            var stockIDParameter = stockID.HasValue ?
                new ObjectParameter("stockID", stockID) :
                new ObjectParameter("stockID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteStock", stockIDParameter);
        }
    
        public virtual int deleteUser(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteUser", idParameter);
        }
    
        public virtual int registerUser(string fname, string lname, string gender, string uname, string passwd, string phoneno, Nullable<decimal> balance, string imgLocation, Nullable<System.DateTime> dateofBirth)
        {
            var fnameParameter = fname != null ?
                new ObjectParameter("fname", fname) :
                new ObjectParameter("fname", typeof(string));
    
            var lnameParameter = lname != null ?
                new ObjectParameter("lname", lname) :
                new ObjectParameter("lname", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            var unameParameter = uname != null ?
                new ObjectParameter("uname", uname) :
                new ObjectParameter("uname", typeof(string));
    
            var passwdParameter = passwd != null ?
                new ObjectParameter("passwd", passwd) :
                new ObjectParameter("passwd", typeof(string));
    
            var phonenoParameter = phoneno != null ?
                new ObjectParameter("phoneno", phoneno) :
                new ObjectParameter("phoneno", typeof(string));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("balance", balance) :
                new ObjectParameter("balance", typeof(decimal));
    
            var imgLocationParameter = imgLocation != null ?
                new ObjectParameter("imgLocation", imgLocation) :
                new ObjectParameter("imgLocation", typeof(string));
    
            var dateofBirthParameter = dateofBirth.HasValue ?
                new ObjectParameter("dateofBirth", dateofBirth) :
                new ObjectParameter("dateofBirth", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("registerUser", fnameParameter, lnameParameter, genderParameter, unameParameter, passwdParameter, phonenoParameter, balanceParameter, imgLocationParameter, dateofBirthParameter);
        }
    
        public virtual ObjectResult<searchListings_Result> searchListings(string search, Nullable<int> userID)
        {
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<searchListings_Result>("searchListings", searchParameter, userIDParameter);
        }
    
        public virtual ObjectResult<searchMyOrder_Result> searchMyOrder(Nullable<int> userID, string search)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<searchMyOrder_Result>("searchMyOrder", userIDParameter, searchParameter);
        }
    
        public virtual ObjectResult<searchofferforuser_Result> searchofferforuser(string search, Nullable<int> userID)
        {
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<searchofferforuser_Result>("searchofferforuser", searchParameter, userIDParameter);
        }
    
        public virtual ObjectResult<searchrecievedOrder_Result> searchrecievedOrder(Nullable<int> userID, string search)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<searchrecievedOrder_Result>("searchrecievedOrder", userIDParameter, searchParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int updateBalance(string uname, Nullable<decimal> balance)
        {
            var unameParameter = uname != null ?
                new ObjectParameter("uname", uname) :
                new ObjectParameter("uname", typeof(string));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("balance", balance) :
                new ObjectParameter("balance", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateBalance", unameParameter, balanceParameter);
        }
    
        public virtual int updateCompany(Nullable<int> companyID, string companyName, string companyType)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("companyName", companyName) :
                new ObjectParameter("companyName", typeof(string));
    
            var companyTypeParameter = companyType != null ?
                new ObjectParameter("companyType", companyType) :
                new ObjectParameter("companyType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateCompany", companyIDParameter, companyNameParameter, companyTypeParameter);
        }
    
        public virtual int updateOffer(Nullable<int> offerID, Nullable<int> userID, Nullable<decimal> offerAmount)
        {
            var offerIDParameter = offerID.HasValue ?
                new ObjectParameter("offerID", offerID) :
                new ObjectParameter("offerID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var offerAmountParameter = offerAmount.HasValue ?
                new ObjectParameter("offerAmount", offerAmount) :
                new ObjectParameter("offerAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateOffer", offerIDParameter, userIDParameter, offerAmountParameter);
        }
    
        public virtual int updateStock(Nullable<int> stockID, Nullable<decimal> amount, Nullable<decimal> price)
        {
            var stockIDParameter = stockID.HasValue ?
                new ObjectParameter("stockID", stockID) :
                new ObjectParameter("stockID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateStock", stockIDParameter, amountParameter, priceParameter);
        }
    
        public virtual int updateUser(Nullable<int> id, string fname, string lname, string gender, string uname, string password, string phone, Nullable<int> age)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var fnameParameter = fname != null ?
                new ObjectParameter("fname", fname) :
                new ObjectParameter("fname", typeof(string));
    
            var lnameParameter = lname != null ?
                new ObjectParameter("lname", lname) :
                new ObjectParameter("lname", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            var unameParameter = uname != null ?
                new ObjectParameter("uname", uname) :
                new ObjectParameter("uname", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("age", age) :
                new ObjectParameter("age", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateUser", idParameter, fnameParameter, lnameParameter, genderParameter, unameParameter, passwordParameter, phoneParameter, ageParameter);
        }
    
        public virtual ObjectResult<viewAllListings1_Result> viewAllListings1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<viewAllListings1_Result>("viewAllListings1");
        }
    
        public virtual ObjectResult<viewAllUsers_Result> viewAllUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<viewAllUsers_Result>("viewAllUsers");
        }
    
        public virtual ObjectResult<viewMyOrder_Result> viewMyOrder(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<viewMyOrder_Result>("viewMyOrder", userIDParameter);
        }
    
        public virtual ObjectResult<viewOffersForAdmin_Result> viewOffersForAdmin()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<viewOffersForAdmin_Result>("viewOffersForAdmin");
        }
    
        public virtual ObjectResult<viewOrdersForAdmin_Result> viewOrdersForAdmin()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<viewOrdersForAdmin_Result>("viewOrdersForAdmin");
        }
    
        public virtual ObjectResult<viewRecievedOrder_Result> viewRecievedOrder(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<viewRecievedOrder_Result>("viewRecievedOrder", userIDParameter);
        }
    
        public virtual ObjectResult<viewSentOffer_Result> viewSentOffer(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<viewSentOffer_Result>("viewSentOffer", userIDParameter);
        }
    
        public virtual ObjectResult<viewUser_Result> viewUser(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<viewUser_Result>("viewUser", usernameParameter);
        }
    }
}
