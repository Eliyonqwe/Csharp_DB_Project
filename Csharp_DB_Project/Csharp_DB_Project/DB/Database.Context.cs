//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Csharp_DB_Project.DB
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DatabaseEntities : DbContext
    {
        public DatabaseEntities()
            : base("name=DatabaseEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<admin> admins { get; set; }
        public virtual DbSet<company> companies { get; set; }
        public virtual DbSet<offer> offers { get; set; }
        public virtual DbSet<order> orders { get; set; }
        public virtual DbSet<stockListing> stockListings { get; set; }
        public virtual DbSet<user> users { get; set; }
        public virtual DbSet<viewAllListing> viewAllListings { get; set; }
        public virtual DbSet<viewListing> viewListings { get; set; }
        public virtual DbSet<viewOffer> viewOffers { get; set; }
    
        public virtual int addCompany(string name, string type, ObjectParameter companyID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addCompany", nameParameter, typeParameter, companyID);
        }
    
        public virtual int addListing(Nullable<int> compID, Nullable<int> userID, Nullable<decimal> amount, Nullable<decimal> price)
        {
            var compIDParameter = compID.HasValue ?
                new ObjectParameter("compID", compID) :
                new ObjectParameter("compID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addListing", compIDParameter, userIDParameter, amountParameter, priceParameter);
        }
    
        public virtual int addOffer(Nullable<int> offeringID, Nullable<int> sellerID, Nullable<int> stockID, Nullable<decimal> offerAmount)
        {
            var offeringIDParameter = offeringID.HasValue ?
                new ObjectParameter("offeringID", offeringID) :
                new ObjectParameter("offeringID", typeof(int));
    
            var sellerIDParameter = sellerID.HasValue ?
                new ObjectParameter("sellerID", sellerID) :
                new ObjectParameter("sellerID", typeof(int));
    
            var stockIDParameter = stockID.HasValue ?
                new ObjectParameter("stockID", stockID) :
                new ObjectParameter("stockID", typeof(int));
    
            var offerAmountParameter = offerAmount.HasValue ?
                new ObjectParameter("offerAmount", offerAmount) :
                new ObjectParameter("offerAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addOffer", offeringIDParameter, sellerIDParameter, stockIDParameter, offerAmountParameter);
        }
    
        public virtual int addOrder(Nullable<int> orderingID, Nullable<int> sellerID, Nullable<int> stockID, Nullable<decimal> orderAmount, Nullable<int> offerID)
        {
            var orderingIDParameter = orderingID.HasValue ?
                new ObjectParameter("orderingID", orderingID) :
                new ObjectParameter("orderingID", typeof(int));
    
            var sellerIDParameter = sellerID.HasValue ?
                new ObjectParameter("sellerID", sellerID) :
                new ObjectParameter("sellerID", typeof(int));
    
            var stockIDParameter = stockID.HasValue ?
                new ObjectParameter("stockID", stockID) :
                new ObjectParameter("stockID", typeof(int));
    
            var orderAmountParameter = orderAmount.HasValue ?
                new ObjectParameter("orderAmount", orderAmount) :
                new ObjectParameter("orderAmount", typeof(decimal));
    
            var offerIDParameter = offerID.HasValue ?
                new ObjectParameter("offerID", offerID) :
                new ObjectParameter("offerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addOrder", orderingIDParameter, sellerIDParameter, stockIDParameter, orderAmountParameter, offerIDParameter);
        }
    
        public virtual int deleteCompany(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteCompany", companyIDParameter);
        }
    
        public virtual int deleteStock(Nullable<int> stockID)
        {
            var stockIDParameter = stockID.HasValue ?
                new ObjectParameter("stockID", stockID) :
                new ObjectParameter("stockID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteStock", stockIDParameter);
        }
    
        public virtual int deleteUser(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteUser", idParameter);
        }
    
        public virtual int registerUser(string fname, string lname, string uname, string passwd, string phoneno, Nullable<decimal> balance)
        {
            var fnameParameter = fname != null ?
                new ObjectParameter("fname", fname) :
                new ObjectParameter("fname", typeof(string));
    
            var lnameParameter = lname != null ?
                new ObjectParameter("lname", lname) :
                new ObjectParameter("lname", typeof(string));
    
            var unameParameter = uname != null ?
                new ObjectParameter("uname", uname) :
                new ObjectParameter("uname", typeof(string));
    
            var passwdParameter = passwd != null ?
                new ObjectParameter("passwd", passwd) :
                new ObjectParameter("passwd", typeof(string));
    
            var phonenoParameter = phoneno != null ?
                new ObjectParameter("phoneno", phoneno) :
                new ObjectParameter("phoneno", typeof(string));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("balance", balance) :
                new ObjectParameter("balance", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("registerUser", fnameParameter, lnameParameter, unameParameter, passwdParameter, phonenoParameter, balanceParameter);
        }
    
        public virtual ObjectResult<searchListing_Result> searchListing(string companyName)
        {
            var companyNameParameter = companyName != null ?
                new ObjectParameter("companyName", companyName) :
                new ObjectParameter("companyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<searchListing_Result>("searchListing", companyNameParameter);
        }
    
        public virtual int updateBalance(string uname, Nullable<decimal> balance)
        {
            var unameParameter = uname != null ?
                new ObjectParameter("uname", uname) :
                new ObjectParameter("uname", typeof(string));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("balance", balance) :
                new ObjectParameter("balance", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateBalance", unameParameter, balanceParameter);
        }
    
        public virtual int updateCompany(Nullable<int> companyID, string companyName, string companyType)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("companyName", companyName) :
                new ObjectParameter("companyName", typeof(string));
    
            var companyTypeParameter = companyType != null ?
                new ObjectParameter("companyType", companyType) :
                new ObjectParameter("companyType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateCompany", companyIDParameter, companyNameParameter, companyTypeParameter);
        }
    
        public virtual int updateStock(Nullable<int> stockID, Nullable<decimal> amount, Nullable<decimal> price)
        {
            var stockIDParameter = stockID.HasValue ?
                new ObjectParameter("stockID", stockID) :
                new ObjectParameter("stockID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateStock", stockIDParameter, amountParameter, priceParameter);
        }
    
        public virtual int updateUser(Nullable<int> id, string fname, string lname, string uname, string password, string phone)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var fnameParameter = fname != null ?
                new ObjectParameter("fname", fname) :
                new ObjectParameter("fname", typeof(string));
    
            var lnameParameter = lname != null ?
                new ObjectParameter("lname", lname) :
                new ObjectParameter("lname", typeof(string));
    
            var unameParameter = uname != null ?
                new ObjectParameter("uname", uname) :
                new ObjectParameter("uname", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateUser", idParameter, fnameParameter, lnameParameter, unameParameter, passwordParameter, phoneParameter);
        }
    
        public virtual ObjectResult<ViewAllUsers_Result> ViewAllUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ViewAllUsers_Result>("ViewAllUsers");
        }
    
        public virtual ObjectResult<viewUser_Result> viewUser(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<viewUser_Result>("viewUser", usernameParameter);
        }
    }
}
